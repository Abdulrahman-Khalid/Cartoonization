import dlib
import sys
import random

detector = dlib.get_frontal_face_detector()
_detect_faces = detect_faces


def randomize(rect):
    return dlib.rectangle(rect.left()+random.randint(-100 ,50), 
        rect.top()+random.randint(-100 ,50), 
        rect.right()+random.randint(-100 ,50), 
        rect.bottom()+random.randint(-100 ,50))
    
def rand_rect(w, h):
    return dlib.rectangle(random.randint(0, w), 
        random.randint(0, h), 
        random.randint(0, w), 
        random.randint(0, h))

frames = 0
frames2 = 0
def detect_faces(frame, *x):
    height, width = frame.shape[:2]

    rects = detector(frame, 0)

    global frames, frames2
    frames += 1
    frames2 += 1

    if frames >= random.randint(8, 15):
        frames = 0
        rects = [randomize(rect) for rect in rects]

    if len(rects) >= 1: 
        rects = [rects[0]]

    if frames2 >= random.randint(30, 80):
        frames2 = 0
        for _ in range(random.randint(1, 3)):
            rects.append(rand_rect(width, height))

    return rects
    

if sys.gettrace() is not None: detect_faces = _detect_faces